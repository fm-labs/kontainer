## Build stage
FROM node:lts AS ui-builder

WORKDIR /app

# Copy package.json and yarn.lock for caching purposes
COPY ./ui/package.json ./ui/yarn.lock ./

# Install packages and cache them
RUN yarn install --frozen-lockfile --network-timeout 600000 && yarn cache clean

# Copy rest of files
# See / edit .dockerignore file for excluded files
COPY ./ui/ /app/
RUN ls -la /app

RUN yarn build



#FROM python:3.13-alpine
FROM alpine@sha256:a8560b36e8b8210634f77d9f7f9efd7ffa463e380b75e2e74aff4511df3ef88c

ENV KONTAINER_HOST=0.0.0.0
ENV KONTAINER_PORT=5000

# Set environment variables for Python
ENV PYTHONUNBUFFERED=1 \
    PYTHONFAULTHANDLER=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PATH="/app/bin:$PATH"

# Install necessary system dependencies & Python
RUN apk update && apk add --no-cache \
    python3 \
    py3-pip \
    py3-setuptools \
    py3-wheel \
    py3-virtualenv \
    curl \
    nginx \
    redis \
    supervisor \
    openssl \
    bash \
    docker-cli \
    && rm -rf /var/cache/apk/*

#RUN python3 -m ensurepip
RUN pip install --no-cache-dir --break-system-packages poetry

# Set a non-root user
RUN addgroup -S appgroup && addgroup -S docker && \
    adduser -S appuser -G appgroup && \
    adduser appuser docker && \
    adduser appuser root


WORKDIR /app

# Copy frontend app from the ui-builder stage
COPY --from=ui-builder /app/dist /app/www

# Install python dependencies
COPY ./core/pyproject.toml ./core/poetry.lock /app/


#RUN pip install poetry \
#    && poetry config virtualenvs.create false \
#    && poetry install --only main --no-root

RUN poetry install --only main --no-root
RUN poetry env info

# Copy the rest of the code
COPY ./core/bin /app/bin
COPY ./core/src /app/src
COPY ./core/main.py /app/main.py
COPY ./core/celery_worker.sh /app/celery_worker.sh


# Configure Nginx
COPY ./core/docker/alpine/nginx/nginx.conf /etc/nginx/nginx.conf
#COPY ./core/docker/nginx/site.default.conf /etc/nginx/http.d/default.conf
COPY docker/nginx/site.ssl.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY ./core/docker/alpine/supervisor/supervisord.conf /etc/supervisord.conf
COPY ./core/docker/supervisor/celery_worker.ini /etc/supervisor.d/celery_worker.ini
COPY ./core/docker/supervisor/redis.ini /etc/supervisor.d/redis.ini
COPY ./core/docker/supervisor/nginx.ini /etc/supervisor.d/nginx.ini
COPY ./core/docker/supervisor/app.ini /etc/supervisor.d/app.ini


# Change ownership to non-root user
RUN chown -R appuser:appgroup /run
RUN chown -R appuser:appgroup /var/run

RUN touch /var/log/supervisord.log && \
    touch /run/supervisord.pid && \
    touch /run/supervisord.sock && \
    mkdir -p /var/log/supervisor && \
    chown -R appuser:appgroup /etc/supervisord.conf /etc/supervisor.d /run/supervisord.pid /run/supervisord.sock && \
    chown -R appuser:appgroup /var/log/supervisord.log /var/log/supervisor

RUN mkdir -p /app/ssl/ &&  \
    touch /var/lib/nginx/logs/error.log && \
    touch /var/lib/nginx/logs/access.log && \
    chown -R appuser:appgroup /app/ssl/ && \
    chown -R appuser:appgroup /var/lib/nginx /var/lib/nginx/logs /run/nginx && \
    chown -R appuser:appgroup /var/lib/nginx/logs/error.log && \
    chown -R appuser:appgroup /var/lib/nginx/logs/access.log

RUN mkdir -p /var/lib/redis && touch /var/log/redis/redis.log && touch /run/redis/redis.pid && \
    chown -R appuser:appgroup /var/lib/redis && \
    chown -R appuser:appgroup /var/log/redis/redis.log /run/redis/redis.pid


#ENTRYPOINT ["supervisord", "--nodaemon", "--configuration", "/etc/supervisord.conf"]
COPY ./core/docker/entrypoint-alpine.sh /entrypoint.sh
RUN ["chmod", "+x", "/entrypoint.sh"]
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisor"]

# Health check
HEALTHCHECK --interval=60s --timeout=3s --retries=3 \
 CMD curl --fail http://localhost:${KONTAINER_PORT}/ || exit 1


#EXPOSE ${KONTAINER_PORT}
#EXPOSE 3080
EXPOSE 3443

USER appuser
## Build stage
FROM node:lts AS ui-builder

WORKDIR /app

# Copy package.json and yarn.lock for caching purposes
COPY ./ui/package.json ./ui/yarn.lock ./

# Install packages and cache them
RUN yarn install --frozen-lockfile --network-timeout 600000 && yarn cache clean

# Copy rest of files
# See / edit .dockerignore file for excluded files
COPY ./ui/ /app/
RUN ls -la /app

RUN yarn build


## Assembly stage
FROM scratch AS assembly-stage

WORKDIR /

# Copy the application code
COPY ./agent/pyproject.toml ./agent/poetry.lock /app/
COPY ./agent/bin /app/bin
COPY ./agent/src /app/src
COPY ./agent/agent.py /app/agent.py
COPY ./agent/celery_worker.sh /app/celery_worker.sh

# Copy frontend app from the ui-builder stage
COPY --from=ui-builder /app/dist /app/www

# Configure Nginx
COPY ./agent/docker/alpine/nginx/nginx.conf /etc/nginx/nginx.conf
#COPY ./agent/docker/nginx/site.default.conf /etc/nginx/http.d/default.conf
COPY ./docker/nginx/site.ssl.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY ./agent/docker/alpine/supervisor/supervisord.conf /etc/supervisord.conf
COPY ./agent/docker/supervisor/celery_worker.ini /etc/supervisor.d/celery_worker.ini
COPY ./agent/docker/supervisor/redis.ini /etc/supervisor.d/redis.ini
COPY ./agent/docker/supervisor/nginx.ini /etc/supervisor.d/nginx.ini
COPY ./agent/docker/supervisor/app.ini /etc/supervisor.d/app.ini



## Production stage
FROM python:3.13-alpine
LABEL maintainer="fm-labs <flowmotionlabs@gmail.com>"
LABEL description="This is the production image for the kmc service"

ENV AGENT_HOST=0.0.0.0
ENV AGENT_PORT=5000

ARG DOCKER_DIR=/var/lib/docker
ARG DOCKER_COMPOSE_VERSION=2.34.0

# Install os packages
RUN apk update && apk add --no-cache \
    bash \
    curl \
    nginx \
    redis \
    supervisor \
    openssl \
    docker-cli \
    git \
    openssh


# Install poetry and other python dependencies
RUN pip install --no-cache-dir --upgrade pip poetry setuptools wheel


# Install docker-compose
RUN mkdir -p $DOCKER_DIR/cli-plugins && \
    ARCH=$(uname -m) && \
    COMPOSE_DOWNLOAD_URL=https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${ARCH} && \
    echo "COMPOSE_DOWNLOAD_URL=$COMPOSE_DOWNLOAD_URL" && \
    curl -SL --fail ${COMPOSE_DOWNLOAD_URL} -o $DOCKER_DIR/cli-plugins/docker-compose && \
    chmod +x $DOCKER_DIR/cli-plugins/docker-compose && \
    ln -s $DOCKER_DIR/cli-plugins/docker-compose /usr/local/bin/docker-compose


# Set a non-root user
RUN addgroup -S appgroup && addgroup -S docker && \
    adduser -S appuser -G appgroup && \
    adduser appuser docker && \
    adduser appuser root

WORKDIR /app


# Install python dependencies
COPY ./agent/pyproject.toml ./agent/poetry.lock /app/
RUN pip install poetry \
    && poetry config virtualenvs.create false \
    && poetry install --only main --no-root

# Copy frontend app from the ui-builder stage
COPY --from=assembly-stage /app /app
COPY --from=assembly-stage /etc/nginx /etc/nginx
COPY --from=assembly-stage /etc/supervisord.conf /etc/supervisord.conf
COPY --from=assembly-stage /etc/supervisor.d /etc/supervisor.d


## Copy frontend app from the ui-builder stage
#COPY --from=ui-builder /app/dist /app/www
#
## Copy the rest of the code
#COPY ./agent/bin /app/bin
#COPY ./agent/src /app/src
#COPY ./agent/agent.py /app/agent.py
#COPY ./agent/celery_worker.sh /app/celery_worker.sh
#
## Configure Nginx
#COPY ./agent/docker/alpine/nginx/nginx.conf /etc/nginx/nginx.conf
##COPY ./agent/docker/nginx/site.default.conf /etc/nginx/http.d/default.conf
#COPY docker/nginx/site.ssl.conf /etc/nginx/http.d/default.conf
#
## Configure Supervisor
#COPY ./agent/docker/alpine/supervisor/supervisord.conf /etc/supervisord.conf
#COPY ./agent/docker/supervisor/celery_worker.ini /etc/supervisor.d/celery_worker.ini
#COPY ./agent/docker/supervisor/redis.ini /etc/supervisor.d/redis.ini
#COPY ./agent/docker/supervisor/nginx.ini /etc/supervisor.d/nginx.ini
#COPY ./agent/docker/supervisor/app.ini /etc/supervisor.d/app.ini


# Change ownership to non-root user
RUN mkdir -p /app/ssl/ && \
    mkdir -p /var/lib/redis && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /var/log/nginx/ && \
    mkdir -p /var/log/redis && \
    touch /var/log/redis/redis.log && touch /run/redis/redis.pid && \
    touch /var/lib/nginx/logs/error.log && \
    touch /var/lib/nginx/logs/access.log && \
    chown -R appuser:appgroup /var/lib/nginx/logs/error.log && \
    chown -R appuser:appgroup /var/lib/nginx/logs/access.log


# Change ownership to non-root user
RUN chown -R appuser:appgroup /run && \
    chown -R appuser:appgroup /var/run && \
    chown -R appuser:appgroup /etc/supervisord.conf /etc/supervisor.d && \
    chown -R appuser:appgroup /var/log/supervisor && \
    chown -R appuser:appgroup /app/ssl/ && \
    chown -R appuser:appgroup /var/lib/nginx /var/lib/nginx/logs /run/nginx && \
    chown -R appuser:appgroup /var/lib/redis && \
    chown -R appuser:appgroup /var/log/redis/redis.log /run/redis/redis.pid && \
    chown -R appuser:appgroup /var/lib/docker/cli-plugins && \
    chown -R appuser:appgroup /usr/local/bin/docker-compose


#ENTRYPOINT ["supervisord", "--nodaemon", "--configuration", "/etc/supervisord.conf"]
COPY ./agent/docker/entrypoint-alpine.sh /entrypoint.sh
RUN ["chmod", "+x", "/entrypoint.sh"]
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisor"]

# Health check
HEALTHCHECK --interval=60s --timeout=3s --retries=3 \
 CMD curl --fail http://localhost:${AGENT_PORT}/ || exit 1


#EXPOSE ${AGENT_PORT}
#EXPOSE 3080
EXPOSE 3443

USER appuser
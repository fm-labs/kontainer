## Build stage
FROM node:lts AS ui-builder

WORKDIR /app

# Copy package.json and yarn.lock for caching purposes
COPY ./ui/package.json ./ui/yarn.lock ./

# Install packages and cache them
RUN yarn install --frozen-lockfile --network-timeout 600000 && yarn cache clean

# Copy rest of files
# See / edit .dockerignore file for excluded files
COPY ./ui/ /app/
RUN ls -la /app

RUN yarn build



FROM python:3.13-alpine AS agent-builder

ENV AGENT_HOST=0.0.0.0
ENV AGENT_PORT=5000

RUN apk update && apk add --no-cache \
    curl \
    nginx \
    redis \
    supervisor \
    openssl \
    bash

WORKDIR /app

# Copy frontend app from the ui-builder stage
COPY --from=ui-builder /app/dist /app/www

# Install python dependencies
COPY ./agent/pyproject.toml ./agent/poetry.lock /app/
RUN pip install poetry \
    && poetry config virtualenvs.create false \
    && poetry install --only main --no-root

# Copy the rest of the code
COPY ./agent/src /app/src
COPY ./agent/agent.py /app/agent.py
COPY ./agent/celery_worker.sh /app/celery_worker.sh

# Configure Nginx
#COPY ./agent/docker/nginx/site.default.conf /etc/nginx/http.d/default.conf
COPY ./docker/nginx/site.default-ssl.conf /etc/nginx/http.d/default.conf

# Configure Supervisor
COPY ./agent/docker/supervisor/celery_worker.ini /etc/supervisor.d/celery_worker.ini


#ENTRYPOINT ["supervisord", "--nodaemon", "--configuration", "/etc/supervisord.conf"]
COPY ./agent/docker/entrypoint-alpine.sh /entrypoint.sh
RUN ["chmod", "+x", "/entrypoint.sh"]
ENTRYPOINT ["/entrypoint.sh"]
CMD ["gunicorn-tcp"]


# Health check
HEALTHCHECK --interval=60s --timeout=3s --retries=3 \
 CMD curl --fail http://localhost:${AGENT_PORT}/ || exit 1


EXPOSE ${AGENT_PORT}
EXPOSE 80
EXPOSE 443
